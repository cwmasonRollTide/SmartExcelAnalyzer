trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  imageNameBackend: 'smart-excel-analyzer-backend'
  imageNameFrontend: 'smart-excel-analyzer-frontend'

jobs:
- job: BuildAndPush
  displayName: 'Build and Push Docker Images'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: Docker@2
    displayName: 'Build and Push Backend Docker Image'
    inputs:
      containerRegistry: '$(dockerRegistryServiceConnection)'
      repository: '$(imageNameBackend)'
      command: 'buildAndPush'
      Dockerfile: '**/Backend/Dockerfile'
      tags: |
        $(Build.BuildId)

  - task: Docker@2
    displayName: 'Build and Push Frontend Docker Image'
    inputs:
      containerRegistry: '$(dockerRegistryServiceConnection)'
      repository: '$(imageNameFrontend)'
      command: 'buildAndPush'
      Dockerfile: '**/Frontend/Dockerfile'
      tags: |
        $(Build.BuildId)

- job: DeployToAKS
  displayName: 'Deploy to AKS'
  dependsOn: BuildAndPush
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: '$(azureSubscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Set variables
        ACR_NAME=myacr
        AKS_NAME=myAKSCluster
        RESOURCE_GROUP=myResourceGroup
        IMAGE_NAME_BACKEND=$(imageNameBackend)
        IMAGE_NAME_FRONTEND=$(imageNameFrontend)
        IMAGE_TAG=$(Build.BuildId)

        # Get the ACR login server
        ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer --output tsv)

        # Get the AKS credentials
        az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME

        # Create a Kubernetes secret for ACR
        kubectl create secret docker-registry acr-secret --docker-server=$ACR_LOGIN_SERVER --docker-username=$(az acr credential show --name $ACR_NAME --query username --output tsv) --docker-password=$(az acr credential show --name $ACR_NAME --query passwords[0].value --output tsv)

        # Deploy to AKS
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml